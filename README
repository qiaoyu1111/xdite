7天学会Rails3
----
day1(2011－6－9):   v0.0.1;v0.0.2;v0.0.3;v0.0.4
day2(2011-6-10):  v0.0.5;v0.0.6;V0.0.7;
day3(2011-6-11):  v0.0.8;v0.0.9


版本说明
----
##v0.0.1: hello world##

地雷： powder安装可能需要快速宽带与重启

地雷： 增加rvmrc文件，避免使用rvm进行多版本管理时，应用无法启动

技巧： 将page改为pages，使用rails destroy controller page删除page相关的控制器。

技巧： 

* git tag  
* git remote rename xdite1 xdite
* git push xdite :work1
* git tag -d work1

##v0.0.2: 手动撰写CRUD##

地雷： 增加返回按钮链接。修正confirm大写错误。

地雷： liai+tab而不是使用lia+tab;

地雷： 使用rep+tab方式更强于rea+tab;

技巧： @boards.each do |board| {} end #Ruby的特殊用法,Block

技巧： Show => @board index => @boards 

参考：[railsforzombies](http://railsforzombies.org/)

##v0.0.3: 改动资源关联方式##

地雷： 作者的图书撰写有错误，应该按照v0.0.2最容易理解的思路撰写.控制器部分作者少写了很多内容。

地雷： 注意routes.rb的 resources :posts #注意resources与resource的区别。resources对应

地雷： hm+tab;Textmate自动的代码需要注意删掉有关引用。

技巧： :locals => {:f =>f } 方式的使用

技巧： Textmate相关快捷方式，尤其是注意撰写资源的时候多使用。

技巧： tail -f log/development.log 跟踪与比较sql语句的差异。

* rest+tab; 
* f.+tab; 
* linpp+tab;
* linp+tab;
* lip+tab;
* rp+tab;
* renp+tab; 
* vp+tab；
* ^+p;
* if+tab;
* table+tab;
* end+tab;
* bt+tab;
* hm+tab;
* mcol+tab;

##v0.0.4: 使用before_filter简化控制器的定义##

问题：textmate的before_filter在何处？

##v0.0.5: 删除board的时候，将相关的post一起删除##
这个版本提交有错误，没有提交成功。

地雷：

错误写法：

	unless @posts.destroy
	  @board.destroy
	end

    unless @posts.destroy==true
      @board.destroy
    end

问题： 如何保证数据完整性？如果post.destroy删除操作执行有错误，如何确保@board.destroy?

问题： 如果批量删除post?

##v0.0.6: devise使用##

主要流程：

	rails g -h #查看可以用的devise命令，一般插件的命令都在这里或者在rake -T里面。
	rails generate devise:install #
	rails generate devise User #
	rake db:migrate #
	rails g devise:views users #
	#[内建导航](https://gist.github.com/1018112)
	#增加<%= notice %>与<%= alert %>在application.html.erb
	#posts_cntroller.rb 
	#before_filter :authenticate_user!,:except=>[:show,:index]
	#修改控制器edit,update and destroy @post=current_user.posts.find(params[:id])
	#对posts控制器的create增加@post.user_id=current_user.id
	#修改boards/show视图,if post.user == current_user 

地雷： 区分<% if post.user == current_user && current_user != nil %>与
<% if post.user == current_user || current_user != nil %>

技巧：[LiveReload](http://doabit.iteye.com/blog/715409)

技巧： bundle

	bundle check
	bundle install
	
技巧： powder restart

技巧： gem常用列表,[参考](https://gist.github.com/1018108)

技巧：  
	git tag -a v0.0.6 -m"devise"
	git tag -l
	git tag -d v0.0.6
	git push xdite :v0.0.6
	git push xdite --tags

##v0.0.7: 管理后台

主要流程：

1.创建路由

2.复制views

	$ mkdir app/controllers/admin/
	$ cd app/controllers
	$ cp app/controllers/posts_controller.rb app/controllers/admin/
	$ cp app/controllers/boards_controller.rb app/controllers/admin/
	$ mkdir app/views/admin/
	$ cp -rf app/views/posts/ app/views/admin/posts/
	$ cp -rf app/views/boards/ app/views/admin/boards/
	$ cp app/views/layouts/application.html.erb app/views/layouts/admin.html.erb

3.prefix

4.user_nav

5.application_controller.rb

def require_is_admin
  unless(current_user && current_user.is_admin ? )
    flash[:alert] = "You must be admin!"
    redirect_to(root_path)
end

地雷：unless(current_user && current_user.is_admin?)是对的，unless(current_user && current_user.is_admin ? )是错的。

6。 砍掉前台的boards的CUD

7. 限制前台的boards的CUD只能从后台运行

@board => admin_board_path(@board)

地雷： 注意
	<li><%= link_to "link text...", boards_path %> #错误写法，board_path => /boards </li>
	<li><%= link_to "link text...", board_path(1) %> # => /board/1</li>
	<li><%= link_to "link text...", edit_admin_board_path(2) %> # => /admin/boards/2/edit</li> #错误写法，应用这个来代替，<% form_for @post, :url=>admin_board_post_path(@board,@post) do |f| %>
	<li><%= link_to "link text...", new_admin_board_path %> # => admin/boards/new</li>

##v0.0.8:  posts计数与seeds.rb写法##

###conuter_cache###

增加posts_count字段在boards表的定义

	rails g migration add_posts_conuter_to_board

然后在app/models/post.rb，申明:counter_cache => true
    
	belongs_to :board, :class_name => "Board", :foreign_key => "board_id",:counter_cache => true

技巧： 

$ rake db:redo
$ rake db:seed --trace

###seeds.rb批量的写法###

	i=1
	until i>=100 do 
	  Board.create(:name=>('board_'+i.to_s)) 
	  i += 1
	end

地雷： i += 1的位置与是否写出来了。



